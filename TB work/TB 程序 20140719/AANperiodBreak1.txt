// N期突破 + atr波动性滤波 + 跟踪止损

Params
	Numeric nPeriodBreak(30); 
	Numeric NatrExit(2); 
	Numeric atrFilter(180); 

vars 
	NumericSeries myEntryPrice(0);
	NumericSeries EntryBar(0);
	NumericSeries HighestCloseFromEntry(0);
	NumericSeries LowestCloseFromEntry(0);
	NumericSeries EntryATR;
	NumericSeries atr;
	NumericSeries EntryFlag(0);
	NumericSeries ExitFlag(0);
	
	NumericSeries StopPrice(0);

	Bool EntryCondition1(False);
	Bool EntryCondition2(False);
	Bool ExitCondition(False);

	
Begin

	atr = AvgTrueRange(15); 
	
	
//----------------------------- 平仓 --------------------------------
	If (ExitFlag == 10)
	{
		Sell(1,Open); 	
		ExitFlag = 0;
	}

	If (ExitFlag == 20)
	{
		BuyToCover(1,Open); 
		ExitFlag = 0;
	}

	//----------------------------- 开仓 --------------------------------

	If (EntryFlag == 10)
	{
		// 如有空仓 buy函数先平空仓再开多。
		Buy(1,Open);                                 
		myEntryPrice = Open;                                               
		EntryATR = atr;                                                    
		EntryBar = CurrentBar;                                             
		HighestCloseFromEntry = Open;  
		EntryFlag = 0;	

		StopPrice = myEntryPrice-NatrExit*atr; // 20140702

	}
	
	If (EntryFlag == 20)
	{
	    // 如有多仓 SellShort函数先平多仓再开空。
		SellShort(1,Open);  
		myEntryPrice = Open;
		EntryATR = atr;
		EntryBar = CurrentBar;
		LowestCloseFromEntry = Open;
		EntryFlag = 0;	
		
		StopPrice = myEntryPrice + NatrExit*atr; // 20140702
	}
	
	
	//----------------------------- 平仓提示 --------------------------------
	if (MarketPosition==1)
	{
		if (Close>HighestCloseFromEntry)
		{	HighestCloseFromEntry = Close; }
		
		
		// --------------------------- 20170702 -------------------//
		if (Close-NatrExit*atr > StopPrice)
		{	StopPrice = Close-NatrExit*atr; }
		
		ExitCondition = (Close<=StopPrice);
		// -------------------------------------------------------//
		
		
		
		/*ExitCondition = (myEntryPrice-Close >= nATR1*EntryATR) 
		               || (HighestCloseFromEntry-Close >= nATR1*atr );*/
					   
					   
		If (ExitCondition)
		{
			PlotString("is2","平多");
			Commentary("平多");
			ExitFlag = 10;
			if (CurrentDate() == Date())
			{ 
				FileAppend("C:\\D\\future\\交易"+Text(CurrentDate())+".txt",
										Text(Date())+"  "+SymbolName()+" ：平多");
			}
		} 
		
	}  
	else If(MarketPosition==-1)
	{
		if (Close<LowestCloseFromEntry)
		{	LowestCloseFromEntry = Close; }
		
		
		// --------------------------- 20170702 -------------------//
		if (Close+NatrExit*atr < StopPrice)
		{	StopPrice = Close+NatrExit*atr; }
		
		ExitCondition = (Close>=StopPrice);
		// -------------------------------------------------------//
		
		
		/*ExitCondition = (Close-myEntryPrice >= nATR1*EntryATR)  
		                || (Close-LowestCloseFromEntry >= nATR1*atr ); */
						
						
		If (ExitCondition)
		{
			PlotString("is3","平空");
			Commentary("平空");
			ExitFlag = 20; 
			if (CurrentDate() == Date())
			{ 
				FileAppend("C:\\D\\future\\交易"+Text(CurrentDate())+".txt",
										Text(Date())+"  "+SymbolName()+" ：平空");
			}
		}

	}
	//-----------------------------------------------------------------------
	
	
	//----------------------------- 开仓提示 --------------------------------
	EntryCondition1 = (Highest(Close,nPeriodBreak)==Close)&&(atr>=atrFilter); 
	EntryCondition2 = (Lowest(Close,nPeriodBreak)==Close)&&(atr>=atrFilter);
	if (MarketPosition == 0 || ExitFlag == 10  || ExitFlag == 20)
	{
		If (EntryCondition1==True)
		{
			PlotString("is1","开多"); 
			Commentary("开多");
			EntryFlag = 10;
			if (CurrentDate() == Date())
			{ 
				FileAppend("C:\\D\\future\\交易"+Text(CurrentDate())+".txt",
										Text(Date())+"  "+SymbolName()+" ：开多"+"  每手风险："
										+Text(Round(NatrExit*atr*ContractUnit(),0))); 
			}
		}
		else If(EntryCondition2)
		{
			PlotString("is1","开空");   
			Commentary("开空");
			EntryFlag = 20;
			
			if (CurrentDate() == Date())
			{ 
				FileAppend("C:\\D\\future\\交易"+Text(CurrentDate())+".txt",
										Text(Date())+"  "+SymbolName()+" ：开空"+"  每手风险："
										+Text(Round(NatrExit*atr*ContractUnit(),0)));    
			}
		}
	}
	   
end   









