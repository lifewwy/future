
ans =

C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\DIARY\diary_20180823T235408.txt

<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3081,1)">3081 </a>    td = table(dstrcut.textdata,dstrcut.data(:,1:2));
if system_dependent('IsDebugMode')==1, dbcont; end
if system_dependent('IsDebugMode')==1, dbquit; end
<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3085,1)">3085 </a>    PositionCell(Position==1,2) = {'多'};
PositionCell(PositionCell{:,3}==1,3) = {'多'}
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('eq')" style="font-weight:bold"> == </a>
Too many input arguments.
} 
PositionCell{:,3}

ans =

   100


ans =

     0


ans =

    -1


ans =

     0


ans =

     1


ans =

     1


ans =

    -1


ans =

     1


ans =

    -1


ans =

    -1


ans =

     1


ans =

     0


ans =

     1


ans =

     1

cell2mat(PositionCell{:,3})
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('cell2mat')" style="font-weight:bold">cell2mat</a>
Too many input arguments.
} 
cell2mat(PositionCell(:,3))

ans =

   100
     0
    -1
     0
     1
     1
    -1
     1
    -1
    -1
     1
     0
     1
     1

PositionCell(cell2mat(PositionCell(:,3))==1,3) = {'多'}

PositionCell = 

    'A1901'     [20180823]    [100]
    'AL1810'    [20180823]    [  0]
    'CF1901'    [20180823]    [ -1]
    'J1901'     [20180823]    [  0]
    'L1901'     [20180823]    '多'  
    'MA1901'    [20180823]    '多'  
    'P1901'     [20180823]    [ -1]
    'RB1901'    [20180823]    '多'  
    'RU1901'    [20180823]    [ -1]
    'SR1901'    [20180823]    [ -1]
    'TA1901'    [20180823]    '多'  
    'V1901'     [20180823]    [  0]
    'Y1901'     [20180823]    '多'  
    'ZN1810'    [20180823]    '多'  

if system_dependent('IsDebugMode')==1, dbquit; end
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('cell2mat', 'C:\Program Files\MATLAB\R2015a\toolbox\matlab\datatypes\cell2mat.p', 45)" style="font-weight:bold">cell2mat</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2015a\toolbox\matlab\datatypes\cell2mat.p',45,0)">line 45</a>)
All contents of the input cell array must be of the same data type.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('panel>pushbutton44_Callback', 'C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m', 3086)" style="font-weight:bold">panel>pushbutton44_Callback</a> (<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3086,0)">line 3086</a>)
    PositionCell(cell2mat(PositionCell(:,3))==-1,2) = {'空'};

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('gui_mainfcn', 'C:\Program Files\MATLAB\R2015a\toolbox\matlab\guide\gui_mainfcn.m', 95)" style="font-weight:bold">gui_mainfcn</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2015a\toolbox\matlab\guide\gui_mainfcn.m',95,0)">line 95</a>)
        feval(varargin{:});

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('panel', 'C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m', 42)" style="font-weight:bold">panel</a> (<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',42,0)">line 42</a>)
    gui_mainfcn(gui_State, varargin{:});

Error in
<a href="matlab:matlab.internal.language.introspective.errorDocCallback('@(hObject,eventdata)panel(''pushbutton44_Callback'',hObject,eventdata,guidata(hObject))')" style="font-weight:bold">@(hObject,eventdata)panel('pushbutton44_Callback',hObject,eventdata,guidata(hObject))</a>

} 
Error while evaluating UIControl Callback

{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('cell2mat', 'C:\Program Files\MATLAB\R2015a\toolbox\matlab\datatypes\cell2mat.p', 45)" style="font-weight:bold">cell2mat</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2015a\toolbox\matlab\datatypes\cell2mat.p',45,0)">line 45</a>)
All contents of the input cell array must be of the same data type.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('panel>pushbutton44_Callback', 'C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m', 3086)" style="font-weight:bold">panel>pushbutton44_Callback</a> (<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3086,0)">line 3086</a>)
    PositionCell(cell2mat(PositionCell(:,3))==-1,3) = {'空'};

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('gui_mainfcn', 'C:\Program Files\MATLAB\R2015a\toolbox\matlab\guide\gui_mainfcn.m', 95)" style="font-weight:bold">gui_mainfcn</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2015a\toolbox\matlab\guide\gui_mainfcn.m',95,0)">line 95</a>)
        feval(varargin{:});

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('panel', 'C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m', 42)" style="font-weight:bold">panel</a> (<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',42,0)">line 42</a>)
    gui_mainfcn(gui_State, varargin{:});

Error in
<a href="matlab:matlab.internal.language.introspective.errorDocCallback('@(hObject,eventdata)panel(''pushbutton44_Callback'',hObject,eventdata,guidata(hObject))')" style="font-weight:bold">@(hObject,eventdata)panel('pushbutton44_Callback',hObject,eventdata,guidata(hObject))</a>

} 
Error while evaluating UIControl Callback

<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3086,1)">3086 </a>    PositionCell(cell2mat(PositionCell(:,3))==-1,3) = {'空'};
if system_dependent('IsDebugMode')==1, dbquit; end
<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3086,1)">3086 </a>    PositionCell(Position==1,3) = {'多'};
if system_dependent('IsDebugMode')==1, dbcont; end
if system_dependent('IsDebugMode')==1, dbquit; end
<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3088,1)">3088 </a>    PositionCell(Position==0,:) = [];
if system_dependent('IsDebugMode')==1, dbquit; end
<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3086,1)">3086 </a>    PositionCell(Position==1,3) = {'多'};
if system_dependent('IsDebugMode')==1, dbquit; end
<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3087,1)">3087 </a>    PositionCell(Position==1,3) = {'多'};
if system_dependent('IsDebugMode')==1, dbcont; end
if system_dependent('IsDebugMode')==1, dbquit; end
<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3091,1)">3091 </a>    strategyPos = sortrows(PositionCell(:,[1,3]),1);
PositionCell(:,[1,3])

ans = 

    'CF1901'    '空'
    'L1901'     '多'
    'MA1901'    '多'
    'P1901'     '空'
    'RB1901'    '多'
    'RU1901'    '空'
    'SR1901'    '空'
    'TA1901'    '多'
    'Y1901'     '多'
    'ZN1810'    '多'

if system_dependent('IsDebugMode')==1, dbcont; end
if system_dependent('IsDebugMode')==1, dbcont; end
if system_dependent('IsDebugMode')==1, dbcont; end
x = {'a','b','c','a'}

x = 

    'a'    'b'    'c'    'a'

x = {'a','b','c','a'}'

x = 

    'a'
    'b'
    'c'
    'a'

y = [1 2 3 1; 1 2 3 1]

y =

     1     2     3     1
     1     2     3     1

y = [1 2 3 1; 1 2 3 1]'

y =

     1     1
     2     2
     3     3
     1     1

t = table(x,y)

t = 

    <strong> x </strong><strong>      y   </strong>
    <strong>___</strong>    <strong>______</strong>

    'a'    1    1
    'b'    2    2
    'c'    3    3
    'a'    1    1

help table
 <strong>table</strong> Table.
    Tables are used to collect heterogeneous data and metadata into a single
    container.  Tables are suitable for storing column-oriented or tabular data
    that are often stored as columns in a text file or in a spreadsheet.  Tables
    can accommodate variables of different types, sizes, units, etc.  They are
    often used to store experimental data, with rows representing different
    observations and columns representing different measured variables.
 
    Use the <strong>table</strong> constructor to create a table from variables in the MATLAB
    workspace.  Use the readtable function to create a table by reading data
    from a text or spreadsheet file.
 
    Tables can be subscripted using parentheses much like ordinary numeric
    arrays, but in addition to numeric and logical indices, you can use a
    table's variable and row names as indices.  You can access individual
    variables in a table much like fields in a structure, using dot
    subscripting.  You can access the contents of one or more variables using
    brace subscripting.
 
    Tables can contain different kinds of variables, including numeric, logical,
    character, categorical, and cell.  However, a table is a different class
    than the variables that it contains.  For example, even a table that
    contains only variables that are double arrays cannot be operated on as if
    it were itself a double array.  However, using dot subscripting, you can
    operate on a variable in a table as if it were a workspace variable.  Using
    brace subscripting, you can operate on one or more variables in a table as
    if they were in a homogeneous array.
 
    A table T has properties that store metadata such as its variable and row
    names.  Access or assign to a property using P = T.Properties.PropName or
    T.Properties.PropName = P, where PropName is one of the following:
 
    <strong>table</strong> metadata properties:
        Description          - A string describing the table
        DimensionNames       - A two-element cell array of strings containing names of
                               the dimensions of the table
        VariableNames        - A cell array containing names of the variables in the table
        VariableDescriptions - A cell array of strings containing descriptions of the
                               variables in the table
        VariableUnits        - A cell array of strings containing units for the variables
                               in table
        RowNames             - A cell array of nonempty, distinct strings containing names
                               of the rows in the table
        UserData             - A variable containing any additional information associated
                               with the table.  You can assign any value to this property.
                        
    <strong>table</strong> methods and functions:
      Construction and conversion:
        <a href="matlab:help table/table">table</a>              - Create a table from workspace variables.
        <a href="matlab:help array2table">array2table</a>        - Convert homogeneous array to table.
        <a href="matlab:help cell2table">cell2table</a>         - Convert cell array to table.
        <a href="matlab:help struct2table">struct2table</a>       - Convert structure array to table.
        <a href="matlab:help table2array">table2array</a>        - Convert table to a homogeneous array.
        <a href="matlab:help table2cell">table2cell</a>         - Convert table to cell array.
        <a href="matlab:help table2struct">table2struct</a>       - Convert table to structure array.
      Import and export:
        <a href="matlab:help readtable">readtable</a>          - Create a table by reading from a file.
        <a href="matlab:help writetable">writetable</a>         - Write a table to a file.
        <a href="matlab:help table/write">write</a>              - Write a table to a file.
      Size and shape:
        <a href="matlab:help istable">istable</a>            - True for tables.
        <a href="matlab:help table/size">size</a>               - Size of a table.
        <a href="matlab:help table/width">width</a>              - Number of variables in a table.
        <a href="matlab:help table/height">height</a>             - Number of rows in a table.
        <a href="matlab:help table/ndims">ndims</a>              - Number of dimensions of a table.
        <a href="matlab:help table/numel">numel</a>              - Number of elements in a table.
        <a href="matlab:help table/horzcat">horzcat</a>            - Horizontal concatenation for tables.
        <a href="matlab:help table/vertcat">vertcat</a>            - Vertical concatenation for tables.
      Set membership:
        <a href="matlab:help table/intersect">intersect</a>          - Find rows common to two tables.
        <a href="matlab:help table/ismember">ismember</a>           - Find rows in one table that occur in another table.
        <a href="matlab:help table/setdiff">setdiff</a>            - Find rows that occur in one table but not in another.
        <a href="matlab:help table/setxor">setxor</a>             - Find rows that occur in one or the other of two tables, but not both.
        <a href="matlab:help table/unique">unique</a>             - Find unique rows in a table.
        <a href="matlab:help table/union">union</a>              - Find rows that occur in either of two tables.
        <a href="matlab:help table/join">join</a>               - Merge two tables by matching up rows using key variables.
        <a href="matlab:help table/innerjoin">innerjoin</a>          - Inner join between two tables.
        <a href="matlab:help table/outerjoin">outerjoin</a>          - Outer join between two tables.
      Data organization:
        <a href="matlab:help table/summary">summary</a>            - Print summary of a table.
        <a href="matlab:help table/sortrows">sortrows</a>           - Sort rows of a table.
        <a href="matlab:help table/stack">stack</a>              - Stack up data from multiple variables into a single variable.
        <a href="matlab:help table/unstack">unstack</a>            - Unstack data from a single variable into multiple variables.
        <a href="matlab:help table/ismissing">ismissing</a>          - Find elements in a table that contain missing values.
        <a href="matlab:help table/standardizeMissing">standardizeMissing</a> - Insert missing data indicators into a table.
      Computations on tables:
        <a href="matlab:help table/varfun">varfun</a>             - Apply a function to variables in a table.
        <a href="matlab:help table/rowfun">rowfun</a>             - Apply a function to rows of a table.
 
    Examples:
 
       % Create a table from individual workspace variables.
       load patients
       patients = table(LastName,Gender,Age,Height,Weight,Smoker,Systolic,Diastolic)
 
       % Select the rows for patients who smoke, and a subset of the variables.
       smokers = patients(patients.Smoker == true, {'LastName' 'Gender' 'Systolic' 'Diastolic'})
 
       % Convert the two blood pressure variables into a single variable.
       patients.BloodPressure = [patients.Systolic patients.Diastolic];
       patients(:,{'Systolic' 'Diastolic'}) = []
 
       % Pick out two specific patients by the LastName variable.
       patients(ismember(patients.LastName,{'Smith' 'Jones'}), :)
 
       % Convert the LastName variable into row names.
       patients.Properties.RowNames = patients.LastName;
       patients.LastName = []
 
       % Use the row names to pick out two specific patients.
       patients({'Smith' 'Jones'},:)
 
       % Add metadata to the table.
       patients.Properties.Description = 'Simulated patient data';
       patients.Properties.VariableUnits =  {''  'Yrs'  'In'  'Lbs'  ''  'mm Hg'};
       patients.Properties.VariableDescriptions{6} = 'Systolic/Diastolic';
       summary(patients)
 
       % Create a new variable in the table from existing variables.
       patients.BMI = (patients.Weight * 0.453592) ./ (patients.Height * 0.0254).^2
       patients.Properties.VariableUnits{'BMI'} =  'kg/m^2';
       patients.Properties.VariableDescriptions{'BMI'} = 'Body Mass Index';
 
       % Sort the table based on the new variable.
       sortrows(patients,'BMI')
 
       % Make a scatter plot of two of the table's variables.
       plot(patients.Height,patients.Weight,'o')
 
       % Create tables from text and spreadsheet files
       patients2 = readtable('patients.dat','ReadRowNames',true)
       patients3 = readtable('patients.xls','ReadRowNames',true)
 
       % Create a table from a numeric matrix
       load tetmesh.mat
       t = array2table(X,'VariableNames',{'x' 'y' 'z'});
       plot3(t.x,t.y,t.z,'.')
 
    See also <a href="matlab:help table/table">table</a>, <a href="matlab:help categorical">categorical</a>

    Reference page in Help browser
       <a href="matlab:doc table">doc table</a>

help unique
 <strong>unique</strong> Set unique.
    C = <strong>unique</strong>(A) for the array A returns the same values as in A but with 
    no repetitions. C will be sorted.    
   
    C = <strong>unique</strong>(A,'rows') for the matrix A returns the unique rows of A.
    The rows of the matrix C will be in sorted order.
   
    [C,IA,IC] = <strong>unique</strong>(A) also returns index vectors IA and IC such that
    C = A(IA) and A = C(IC) (or A(:) = C(IC), if A is a matrix or array).
   
    [C,IA,IC] = <strong>unique</strong>(A,'rows') also returns index vectors IA and IC such
    that C = A(IA,:) and A = C(IC,:). 
   
    [C,IA,IC] = <strong>unique</strong>(A,OCCURRENCE) and
    [C,IA,IC] = <strong>unique</strong>(A,'rows',OCCURRENCE) specify which index is returned
    in IA in the case of repeated values (or rows) in A. The default value
    is OCCURENCE = 'first', which returns the index of the first occurrence 
    of each repeated value (or row) in A, while OCCURRENCE = 'last' returns
    the index of the last occurrence of each repeated value (or row) in A.
   
    [C,IA,IC] = <strong>unique</strong>(A,'stable') returns the values of C in the same order
    that they appear in A, while [C,IA,IC] = <strong>unique</strong>(A,'sorted') returns the
    values of C in sorted order. If A is a row vector, then C will be a row
    vector as well, otherwise C will be a column vector. IA and IC are
    column vectors. If there are repeated values in A, then IA returns the
    index of the first occurrence of each repeated value.
  
    [C,IA,IC] = <strong>unique</strong>(A,'rows','stable') returns the rows of C in the same
    order that they appear in A, while [C,IA,IC] = <strong>unique</strong>(A,'rows','sorted')
    returns the rows of C in sorted order.
  
    The behavior of <strong>unique</strong> has changed.  This includes:
      -	occurrence of indices in IA and IC switched from last to first
      -	IA and IC will always be column index vectors
  
    If this change in behavior has adversely affected your code, you may 
    preserve the previous behavior with:
  
         [C,IA,IC] = <strong>unique</strong>(A,'legacy')
         [C,IA,IC] = <strong>unique</strong>(A,'rows','legacy') 
         [C,IA,IC] = <strong>unique</strong>(A,OCCURRENCE,'legacy')
         [C,IA,IC] = <strong>unique</strong>(A,'rows',OCCURRENCE,'legacy')
 
    Examples:
 
        a = [9 9 9 9 9 9 8 8 8 8 7 7 7 6 6 6 5 5 4 2 1]
 
        [c1,ia1,ic1] = unique(a)
        % returns
        c1 = [1 2 4 5 6 7 8 9]
        ia1 = [21 20 19 17 14 11 7 1]'
        ic1 = [8 8 8 8 8 8 7 7 7 7 6 6 6 5 5 5 4 4 3 2 1]'
 
        [c2,ia2,ic2] = unique(a,'stable')
        % returns
        c2 = [9 8 7 6 5 4 2 1]
        ia2 = [1 7 11 14 17 19 20 21]'
        ic2 = [1 1 1 1 1 1 2 2 2 2 3 3 3 4 4 4 5 5 6 7 8]'
 
        c = unique([1 NaN NaN 2])
        % NaNs compare as not equal, so this returns
        c = [1 2 NaN NaN]
 
    Class support for input A:
       - logical, char, all numeric classes
       - cell arrays of strings
       -- 'rows' option is not supported for cell arrays
       - objects with methods SORT (SORTROWS for the 'rows' option) and NE
       -- including heterogeneous arrays
 
    See also <a href="matlab:help union">union</a>, <a href="matlab:help intersect">intersect</a>, <a href="matlab:help setdiff">setdiff</a>, <a href="matlab:help setxor">setxor</a>, <a href="matlab:help ismember">ismember</a>, <a href="matlab:help sort">sort</a>, <a href="matlab:help sortrows">sortrows</a>.

    <a href="matlab:matlab.internal.language.introspective.displayOverloads('unique')">Other functions named unique</a>

    Reference page in Help browser
       <a href="matlab:doc unique">doc unique</a>

t

t = 

    <strong> x </strong><strong>      y   </strong>
    <strong>___</strong>    <strong>______</strong>

    'a'    1    1
    'b'    2    2
    'c'    3    3
    'a'    1    1

[C,IA,IC] = unique(t)

C = 

    <strong> x </strong><strong>      y   </strong>
    <strong>___</strong>    <strong>______</strong>

    'a'    1    1
    'b'    2    2
    'c'    3    3


IA =

     1
     2
     3


IC =

     1
     2
     3
     1

x

x = 

    'a'
    'b'
    'c'
    'a'

x = {'a','b','c','a'}';
y = [1 2 3 1; 1 2 3 1]'

y =

     1     1
     2     2
     3     3
     1     1

y = [1 2 3 1; 1 2 3 1]';
t = table(x,y)

t = 

    <strong> x </strong><strong>      y   </strong>
    <strong>___</strong>    <strong>______</strong>

    'a'    1    1
    'b'    2    2
    'c'    3    3
    'a'    1    1

t

t = 

    <strong> x </strong><strong>      y   </strong>
    <strong>___</strong>    <strong>______</strong>

    'a'    1    1
    'b'    2    2
    'c'    3    3
    'a'    1    1

[C,IA,IC] = unique(t)

C = 

    <strong> x </strong><strong>      y   </strong>
    <strong>___</strong>    <strong>______</strong>

    'a'    1    1
    'b'    2    2
    'c'    3    3


IA =

     1
     2
     3


IC =

     1
     2
     3
     1

{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('importdata', 'C:\Program Files\MATLAB\R2015a\toolbox\matlab\iofun\importdata.p', 136)" style="font-weight:bold">importdata</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2015a\toolbox\matlab\iofun\importdata.p',136,0)">line 136</a>)
Unable to open file.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('panel>pushbutton44_Callback', 'C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m', 3069)" style="font-weight:bold">panel>pushbutton44_Callback</a> (<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',3069,0)">line 3069</a>)
    dstrcut = importdata([directory2,'TB持仓\',fileStruct.name]);

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('gui_mainfcn', 'C:\Program Files\MATLAB\R2015a\toolbox\matlab\guide\gui_mainfcn.m', 95)" style="font-weight:bold">gui_mainfcn</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2015a\toolbox\matlab\guide\gui_mainfcn.m',95,0)">line 95</a>)
        feval(varargin{:});

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('panel', 'C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m', 42)" style="font-weight:bold">panel</a> (<a href="matlab: opentoline('C:\D\xyz\future\m\跟踪开仓-记录资金-图像识别-4\跟踪开仓\panel.m',42,0)">line 42</a>)
    gui_mainfcn(gui_State, varargin{:});

Error in
<a href="matlab:matlab.internal.language.introspective.errorDocCallback('@(hObject,eventdata)panel(''pushbutton44_Callback'',hObject,eventdata,guidata(hObject))')" style="font-weight:bold">@(hObject,eventdata)panel('pushbutton44_Callback',hObject,eventdata,guidata(hObject))</a>

} 
Error while evaluating UIControl Callback

